import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import routes from './routes';
import sequelize from './config/database';
import './models'; // —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥–µ–ª–µ–π
import seedDatabase from './seedData';
import path from 'path';
import { fileURLToPath } from 'url';
import fs from 'fs';
dotenv.config();
const app = express();
const PORT = process.env.PORT || 5000;
const isDev = process.env.NODE_ENV !== 'production';
// Middleware
app.use(cors({
    origin: '*',
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization'],
    credentials: true
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
// –°—Ç–∞—Ç—É—Å–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (_req, res) => {
    res.json({ status: 'ok', message: 'CRM Repair API –ø—Ä–∞—Ü—é—î!' });
});
// –û—Å–Ω–æ–≤–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏ API
app.use('/api', routes);
app.use('/', routes);
// –ì–ª–æ–±–∞–ª—å–Ω–∏–π error handler
app.use((err, _req, res, _next) => {
    console.error('–°–µ—Ä–≤–µ—Ä–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', err);
    res.status(500).send('–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫');
});
// ==== –î–û–î–ê–ù–û: –û–±—Ä–æ–±–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É –¥–ª—è React SPA ====
// –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–ª—è __dirname –≤ ES-–º–æ–¥—É–ª—ñ
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
// –®–ª—è—Ö –¥–æ React-–±—ñ–ª–¥—É
const clientBuildPath = path.join(__dirname, '..', 'client', 'dist');
// –Ø–∫—â–æ –±—ñ–ª–¥ —ñ—Å–Ω—É—î ‚Äî –æ–±—Å–ª—É–≥–æ–≤—É—î–º–æ –π–æ–≥–æ
if (fs.existsSync(clientBuildPath)) {
    app.use(express.static(clientBuildPath));
    // Fallback –¥–ª—è SPA-–º–∞—Ä—à—Ä—É—Ç—ñ–≤ (/, /clients, /orders —Ç–æ—â–æ)
    app.get('*', (_req, res) => {
        res.sendFile(path.join(clientBuildPath, 'index.html'));
    });
}
else {
    console.warn('‚ö†Ô∏è  client/dist –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä, —á–∏ –∑—Ä–æ–±–ª–µ–Ω–∏–π –±—ñ–ª–¥ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É.');
}
// ==== –ö—ñ–Ω–µ—Ü—å –æ–±—Ä–æ–±–∫–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É ====
// –°—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
const startServer = async () => {
    try {
        await sequelize.authenticate();
        console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        await sequelize.sync({ force: isDev, alter: !isDev });
        console.log('üóÉ –°—Ö–µ–º–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–∞');
        try {
            const clientCount = await (await import('./models')).Client.count();
            if (clientCount === 0) {
                console.log('üìä –ó–∞–ø–æ–≤–Ω—é—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö —Ç–µ—Å—Ç–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏...');
                await seedDatabase();
                console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ');
            }
            else {
                console.log('üìä –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –≤–∂–µ –º—ñ—Å—Ç–∏—Ç—å –¥–∞–Ω—ñ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é');
            }
        }
        catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:', error);
        }
        app.listen(PORT, () => {
            console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
        });
    }
    catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞:', error);
    }
};
startServer();
